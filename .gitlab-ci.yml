---
stages:
  - lint
  - test
  - sonar
  - build

lint:
  image: python:3-slim
  rules:
    - if: $CI_COMMIT_TAG
      allow_failure: false
      when: on_success
    - when: always
      allow_failure: true
  tags:
    - k8s
  stage: lint
  before_script:
    - pip install ruff
  script:
    - ruff format --check --diff
    - ruff check --diff

test:
  image: python:3
  rules:
    - if: $CI_COMMIT_TAG
      allow_failure: false
      when: on_success
    - when: always
      allow_failure: true
  variables:
    PYTHONFAULTHANDLER: "1"
    PYTHONHASHSEED: random
    PYTHONUNBUFFERED: "1"
    PIP_DEFAULT_TIMEOUT: "100"
    PIP_DISABLE_PIP_VERSION_CHECK: "1"
    PIP_NO_CACHE_DIR: "1"
    POETRY_VERSION: "1.8.4"
  tags:
    - k8s
  stage: test
  before_script:
    - python -m venv .venv
    - .venv/bin/pip install "poetry==$POETRY_VERSION"
    - .venv/bin/poetry install
  script:
    - .venv/bin/coverage run -m pytest
    - .venv/bin/coverage xml
  artifacts:
    untracked: false
    when: on_success
    access: all
    expire_in: "1 day"
    paths:
      - coverage.xml

sonarqube-check:
  stage: sonar
  needs:
    - test
  image:
    name: sonarsource/sonar-scanner-cli:11
    entrypoint: [""]
  tags:
    - k8s
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" # Defines the location of the analysis task cache
    GIT_DEPTH: "0" # Tells git to fetch all the branches of the project, required by the analysis task
  script:
    - sonar-scanner -Dsonar.host.url="${SONAR_HOST_URL}"
  rules:
    - if: $CI_COMMIT_TAG
      allow_failure: false
      when: on_success
    - when: always
      allow_failure: true

docker:
  image: gcr.io/kaniko-project/executor:v1.23.1-debug
  tags:
    - k8s
  stage: build
  variables:
    DOCKERFILE: Dockerfile
  rules:
    # If run from web - set docker tags to night repository and branch name
    - if: $CI_PIPELINE_SOURCE == "web"
      variables:
        IMAGE_TAG: ${docker_registry_night}/${CI_PROJECT_PATH}:${CI_COMMIT_REF_NAME}
        IMAGE_TAG_2: ${docker_registry_night}/${CI_PROJECT_PATH}:${CI_COMMIT_SHORT_SHA}
      when: on_success
    # If run from tag - set docker tags to prod repository, add latest tag variable
    - if: $CI_COMMIT_TAG
      variables:
        IMAGE_TAG: ${docker_registry}/${CI_PROJECT_PATH}:${CI_COMMIT_TAG}
        IMAGE_TAG_2: ${docker_registry}/${CI_PROJECT_PATH}:latest
      when: on_success
    - when: never
  before_script:
    - echo $DOCKER_AUTH_CONFIG > /kaniko/.docker/config.json
  script:
    - >
      /kaniko/executor
      --registry-mirror repo-proxy.ismv.ru
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/${DOCKERFILE}"
      --destination ${IMAGE_TAG}
      --destination ${IMAGE_TAG_2}
      ${KANIKO_ARGS}
      --label "org.opencontainers.image.title=$CI_PROJECT_TITLE"
      --label "org.opencontainers.image.url=$CI_PROJECT_URL"
      --label "org.opencontainers.image.created=$CI_JOB_STARTED_AT"
      --label "org.opencontainers.image.revision=$CI_COMMIT_SHA"
      --label "org.opencontainers.image.version=$IMAGE_VERSION"
      --label "org.opencontainers.image.ref.name=$CI_COMMIT_REF_NAME"
      --label "org.opencontainers.image.authors=$CI_COMMIT_AUTHOR"
      --label "org.opencontainers.image.source=$CI_PROJECT_URL"
